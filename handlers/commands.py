from aiogram.types import Message, CallbackQuery
from aiogram import Router,F
from aiogram.filters import Command,or_f
from pyexpat.errors import messages
from keyboards.reply import menu_kb
from keyboards.inline import about_kb,country_kb1,country_kb2


command_router = Router()




#—Å—Ç–∞—Ä—Ç
@command_router.message(Command('start'))
async def start_handler(message: Message):
    start_text = (
        '–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–≤–æ–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏. \n –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. ‚úàüåè'
    )
    #–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ .answer()
    await message.answer(text=start_text, reply_markup=country_kb1)



#@command_router.message(Command('about'))
#async def about_handler(message: Message):
#    about_text = (
#        '–Ø –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö. –ñ–º–∏ "start"'
#    )
#    await message.answer(text = about_text)

@command_router.message(F.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
async def say_hi(message: Message):
    await message.reply(text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëÄ')


@command_router.message(F.text.lower().contains('‚ù§'))
async def send_cute_msg(message: Message):
    cute_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–æ!'
    await message.answer(text=cute_text)

#–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±–æ–π —Å—Ç–∏–∫–µ—Ä
@command_router.message(F.sticker)
async def react_to_sticker(message: Message):
    await message.reply(text = '–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üëç')

#–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ
@command_router.message(F.photo)
async def react_to_photo(m:Message):
    text_to_photo = '–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ)'
    await m.reply(text = text_to_photo)

#–∫–æ–≥–¥–∞ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª —Å–ø–∞—Å–∏–±–æ –∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à–µ —Å–æ–æ
@command_router.message(F.reply_to_message & F.text.lower().contains('—Å–ø–∞—Å–∏–±–æ'))
async def react_to_photo(m:Message):
    await m.reply(text = '–ù–µ –∑–∞ —á—Ç–æ!üëå')

#–ü–æ–∫–∞
@command_router.message(F.text.lower().contains('–ø–æ–∫–∞'))
async def say_bye(m:Message):
    await m.reply(text='–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏ ‚ù§')

@command_router.message(Command('about'))
async def about_info(message: Message):
    about_message = "–¢—ã –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /about\n–¢—É—Ç –º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º"
    await message.answer(text=about_message,reply_markup=about_kb)


@command_router.message(Command('menu'))
async def show_menu(message: Message):
    menu_message = '–¢—ã –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É menu \n –í—ã–±–µ—Ä–∏ '
    await message.answer(text = menu_message,reply_markup=menu_kb)

@command_router.message(F.text == 'docs')
async def send_docs(message: Message):
    await message.answer(text = 'some doc info')

@command_router.message(Command('style'))
async def send_styles(message:Message):
    text = (
        "<b>bold</b> -- <strong>bold</strong>\n"
        "<i>italic</i> -- <em>italic</em>\n"
        "<u>underline</u> -- <ins>underline</ins>\n"
        "<s>strikethrough</s> -- <strike>strikethrough</strike> --  <del>strikethrough</del>\n"
        "<span class=\"tg-spoiler\">spoiler</span> -- <tg-spoiler>spoiler</tg-spoiler>\n"
        "<b>bold   <i>italic bold   <s>italic bold strikethrough "
        "<span class=\"tg-spoiler\">italic bold strikethrough spoiler</span>"
        "</s> <u>underline italic bold</u></i> bold</b>\n"
        "<a href=\"http://www.example.com/\">inline URL</a>\n"
        "<code>inline fixed-width code</code>\n"
        "<pre>pre-formatted fixed-width code block</pre>\n"
        "<pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming "
        "language</code></pre>"

    )
    await message.answer(text=text,parse_mode='HTML')




#@command_router.message()
#async def echo_handler(message: Message):
#   await message.answer(message.text)